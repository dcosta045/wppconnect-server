#!/usr/bin/env node

/**
 * Script de migra√ß√£o para configurar o banco PostgreSQL
 * para persist√™ncia de sess√µes do WppConnect
 */

const { Pool } = require('pg');

async function runMigration() {
  let pool;
  
  try {
    console.log('üîÑ Iniciando migra√ß√£o do banco de dados...');
    
    // Configurar conex√£o
    const databaseUrl = process.env.DATABASE_URL || process.env.POSTGRES_URL;
    
    if (!databaseUrl) {
      console.error('‚ùå DATABASE_URL ou POSTGRES_URL n√£o encontrada nas vari√°veis de ambiente');
      console.log('üí° Certifique-se de que a vari√°vel DATABASE_URL est√° configurada no Railway');
      process.exit(1);
    }
    
    pool = new Pool({
      connectionString: databaseUrl,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });
    
    console.log('‚úÖ Conex√£o com PostgreSQL estabelecida');
    
    // Criar tabela de sess√µes
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS wpp_sessions (
        id SERIAL PRIMARY KEY,
        session_name VARCHAR(255) UNIQUE NOT NULL,
        session_data BYTEA NOT NULL,
        file_name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE INDEX IF NOT EXISTS idx_session_name ON wpp_sessions(session_name);
      CREATE INDEX IF NOT EXISTS idx_updated_at ON wpp_sessions(updated_at);
    `;
    
    await pool.query(createTableQuery);
    console.log('‚úÖ Tabela wpp_sessions criada/verificada com sucesso');
    
    // Verificar se existem sess√µes
    const countResult = await pool.query('SELECT COUNT(*) FROM wpp_sessions');
    const sessionCount = parseInt(countResult.rows[0].count);
    
    console.log(`üìä Total de sess√µes no banco: ${sessionCount}`);
    
    if (sessionCount > 0) {
      const sessionsResult = await pool.query(`
        SELECT session_name, created_at, updated_at 
        FROM wpp_sessions 
        ORDER BY updated_at DESC 
        LIMIT 5
      `);
      
      console.log('üìã √öltimas sess√µes:');
      sessionsResult.rows.forEach(session => {
        console.log(`   - ${session.session_name} (atualizada: ${session.updated_at})`);
      });
    }
    
    console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
    
    if (error.code === 'ENOTFOUND') {
      console.log('üí° Verifique se a URL do banco de dados est√° correta');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üí° Verifique se o banco PostgreSQL est√° rodando e acess√≠vel');
    } else if (error.code === '28P01') {
      console.log('üí° Erro de autentica√ß√£o - verifique usu√°rio e senha');
    }
    
    process.exit(1);
  } finally {
    if (pool) {
      await pool.end();
    }
  }
}

// Executar migra√ß√£o se chamado diretamente
if (require.main === module) {
  runMigration();
}

module.exports = { runMigration };

