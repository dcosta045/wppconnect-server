/**
 * EXEMPLO DE MODIFICA√á√ÉO DO ARQUIVO server.ts/server.js
 * 
 * Este arquivo mostra como integrar a persist√™ncia PostgreSQL
 * ao servidor WppConnect existente.
 * 
 * INSTRU√á√ïES:
 * 1. Adicione as importa√ß√µes no in√≠cio do seu arquivo server.ts/server.js
 * 2. Inicialize a integra√ß√£o antes de configurar as rotas
 * 3. Configure a integra√ß√£o com o Express
 * 4. Modifique a cria√ß√£o de clientes WppConnect (se aplic√°vel)
 */

// ==========================================
// 1. ADICIONAR NO IN√çCIO DO ARQUIVO
// ==========================================

const {
  initializePostgreSQLIntegration,
  setupExpressIntegration,
  wrapWppConnectCreate,
  setupGracefulShutdown
} = require('./postgresqlIntegration');

// ==========================================
// 2. MODIFICAR A INICIALIZA√á√ÉO DO SERVIDOR
// ==========================================

async function startServer() {
  try {
    // Suas configura√ß√µes existentes do Express
    const app = express();
    
    // ... outras configura√ß√µes do Express ...
    
    // ADICIONAR: Inicializar integra√ß√£o PostgreSQL
    console.log('Inicializando integra√ß√£o PostgreSQL...');
    await initializePostgreSQLIntegration();
    
    // ADICIONAR: Configurar integra√ß√£o com Express
    setupExpressIntegration(app);
    
    // ... resto da configura√ß√£o do servidor ...
    
    // ADICIONAR: Configurar graceful shutdown
    setupGracefulShutdown();
    
    // Iniciar servidor
    const port = process.env.PORT || 3000;
    app.listen(port, '0.0.0.0', () => {
      console.log(`üöÄ Servidor WppConnect rodando na porta ${port}`);
      console.log(`üìä Swagger dispon√≠vel em: http://localhost:${port}/api-docs`);
      console.log(`üîó Gerenciamento de sess√µes: http://localhost:${port}/api/sessions/status`);
    });
    
  } catch (error) {
    console.error('Erro ao iniciar servidor:', error);
    process.exit(1);
  }
}

// ==========================================
// 3. SE VOC√ä USAR CRIA√á√ÉO CUSTOMIZADA DE CLIENTES
// ==========================================

// ANTES (exemplo):
// const client = await wppconnect.create(sessionName, options);

// DEPOIS:
// const createClient = wrapWppConnectCreate(wppconnect.create);
// const client = await createClient(sessionName, options);

// ==========================================
// 4. EXEMPLO COMPLETO DE INTEGRA√á√ÉO
// ==========================================

/*
const express = require('express');
const wppconnect = require('@wppconnect-team/wppconnect');
const {
  initializePostgreSQLIntegration,
  setupExpressIntegration,
  wrapWppConnectCreate,
  setupGracefulShutdown
} = require('./postgresqlIntegration');

async function main() {
  const app = express();
  
  // Configura√ß√µes b√°sicas do Express
  app.use(express.json());
  app.use(express.urlencoded({ extended: true }));
  
  // Inicializar integra√ß√£o PostgreSQL
  await initializePostgreSQLIntegration();
  
  // Configurar integra√ß√£o com Express
  setupExpressIntegration(app);
  
  // Wrapper para cria√ß√£o de clientes (opcional)
  const createClient = wrapWppConnectCreate(wppconnect.create);
  
  // Suas rotas existentes...
  app.post('/api/:session/start-session', async (req, res) => {
    try {
      const { session } = req.params;
      const client = await createClient(session, {
        // suas op√ß√µes...
      });
      
      res.json({ message: 'Sess√£o iniciada com sucesso' });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
  
  // Configurar graceful shutdown
  setupGracefulShutdown();
  
  // Iniciar servidor
  const port = process.env.PORT || 3000;
  app.listen(port, '0.0.0.0', () => {
    console.log(`Servidor rodando na porta ${port}`);
  });
}

main().catch(console.error);
*/

// ==========================================
// 5. NOVAS ROTAS DISPON√çVEIS AP√ìS INTEGRA√á√ÉO
// ==========================================

/*
GET    /api/sessions/list           - Lista todas as sess√µes (local + banco)
POST   /api/sessions/:name/sync     - Sincroniza sess√£o espec√≠fica
POST   /api/sessions/:name/restore  - Restaura sess√£o do banco
DELETE /api/sessions/:name          - Remove sess√£o (local + banco)
GET    /api/sessions/status         - Status do sistema de persist√™ncia
*/

module.exports = {
  // Exportar fun√ß√µes se necess√°rio para outros m√≥dulos
};

